generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int              @id @default(autoincrement())
  name                 String           
  email                String           @unique 
  passwordHash         String           @map("password_hash")
  phoneNumber          String?          @map("phone_number")
  city                 String           
  state                String           
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime?        @updatedAt @map("updated_at")

  // Relations
  pets                 Pet[] 
  adoptionRequests     AdoptionRequest[]
  adoptions            Adoption[]
  favoritedPet         FavoritedPet[]
}

model Pet {
  id                   String           @id 
  ownerId              Int              @map("owner_id")
  name                 String
  species              String
  breed                String?
  gender               String
  age                  Int
  size                 String
  description          String?
  vaccinated           Boolean
  neutered             Boolean
  status               String
  imagesUrls           String[]         @map("images_urls")
  city                 String
  state                String
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime?        @updatedAt @map("updated_at")

  // Relations
  owner                User             @relation(fields: [ownerId], references: [id])
  adoptionRequests     AdoptionRequest[]
  adoptions            Adoption?         
  favoritedPet         FavoritedPet[]
}

model AdoptionRequest {
  id                   String           @id 
  petId                String           @map("pet_id")
  requestUserId        Int              @map("request_user_id")
  status               String
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime?        @updatedAt @map("updated_at")

  // Relations
  pet                  Pet              @relation(fields: [petId], references: [id])
  user                 User             @relation(fields: [requestUserId], references: [id])

  // Composite unique constraint  
  @@unique([petId, requestUserId])
}

model Adoption {
  id                   String           @id 
  petId                String           @map("pet_id")       @unique
  adopter_id           Int              @map("user_id")
  status               String
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime?        @updatedAt @map("updated_at")

  // Relations
  pet                  Pet             @relation(fields: [petId], references: [id])
  user                 User            @relation(fields: [adopter_id], references: [id])
}

model FavoritedPet {
  id         String   @id
  userId     Int      @map("user_id")
  petId      String   @map("pet_id")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  pet        Pet      @relation(fields: [petId], references: [id])

  // Composite unique constraint
  @@unique([userId, petId]) 
}

